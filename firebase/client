var config = require("./config");
var http = require("http");

/**
 * A generic http client that handles the communication with remote APIs
 * @class Client
 * @constructor Client
 */
function Client(dto) {
  if(!dto) dto = {};
  this.token = dto.token ? dto.token : config.token;
}

/**
 * Invoke a given API. 
 * This method can throw exceptions
 * @method callApi
 * @param {Object} params : the parameters of the http call to issue
 * 	{String} params.url : the url of the targeted API
 *	{String} params.method : (optional) the http method to use when invoking the API
 *	{Object} params.headers: (optional) the http headers to send to the API
 *	{Object} params.params: (optional) the parameters that are expected by the API
 */
Client.prototype.callApi = function(params) {
  try {   
     return this._callApi(params);
  }catch(response) {
      this._handleError(response); 
  }
};

Client.prototype._callApi = function(reqparams) {
   
    var params = reqparams ? JSON.parse(JSON.stringify(reqparams)) : {};
    if (!params.params){
        params.params={};
    }
    
    
    params.headers = params.headers ? params.headers : {};
    
    if(!params.method){
        params.method = "GET";
    }
   
    if (params.params && (!params.method || params.method == "GET")) {
        params.params = this._paramsToString(params.params);
    }

 

    params.url = params.url.indexOf("http") > -1 ? params.url : config.endPoint + "/"  + params.url;
    params.headers["Authorization"] =  "Bearer " + this.token

    console.log(JSON.stringify(params));
    
    var response = http.request(params);
    
	
    console.log("Received following response  : " + JSON.stringify(response));
    if (response.status >= "200" && response.status < "300") {

        var responseBody = "";
        if (response.body) {

            try { 
                responseBody = JSON.parse(response.body ?  response.body : {});
            }catch(exception) {
                responseBody = response.body;
            } 
        }    
		//console.log(" response body  : " + JSON.stringify(responseBody));
        if (responseBody && responseBody.message) {
            throw response;
        }else {
            return responseBody;
        }
    }else {
        throw response;
    }
};

  
Client.prototype._handleError = function(response) {
  var errorObj = "";
  try {    
    errorObj = JSON.parse(response);
  }catch(e) {
    // probably not JSON
   
      errorObj = response;
    
  };
	  console.log(errorObj);
  throw {
    "errorCode": "Invocation_Error",
    "errorDetail": errorObj
  };
};

/*
 * Transform all Numeric and boolean parameters to string so they can be passed to http.callApi
 * (shallow only)
 */
Client.prototype._paramsToString = function(params) {
  
  var newParams = {};
  for (var p in params) {
    
    if (typeof(params[p]) != "object") {
    	newParams[p] = "" +  params[p];
    }else {
      newParams[p] = params[p];
    }
  }
  
  return newParams;
};	